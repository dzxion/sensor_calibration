close all
clear all
clc

ToDeg = 180/pi;ToRad = pi/180;
GravityAcc = 980.665;
IMU_Sensors_Count = 1;
freq_sdlog = 50;

%% 导入数据
name='校准1';
fip=fopen([name,'.REC'],'rb');
if fip==-1
    return
end
k=0;
imu_cnt=0;
gps_cnt=0;
while ~feof(fip) 
    k=k+1;
    head=fread(fip,[1,1],'uint8');
    if size(head,1)==0
        break
    end
    type(k)=fread(fip,[1,1],'uint8');
    leng=fread(fip,[1,1],'uint8');
    check=fread(fip,[1,1],'uint8');
    Time(k)=fread(fip,[1,1],'uint32');
    TTT=Time(k);
    if type(k)==0%imu
        imu_cnt=imu_cnt+1;
        imu_sys_time(imu_cnt)=Time(k);
        
        gyro1_raw_x(imu_cnt)=(fread(fip,[1,1],'float')-32768);
        gyro1_raw_y(imu_cnt)=(fread(fip,[1,1],'float')-32768);
        gyro1_raw_z(imu_cnt)=(fread(fip,[1,1],'float')-32768);
        
        acc1_raw_x(imu_cnt)=(fread(fip,[1,1],'float')-32768);
        acc1_raw_y(imu_cnt)=(fread(fip,[1,1],'float')-32768);
        acc1_raw_z(imu_cnt)=(fread(fip,[1,1],'float')-32768);
        
        time(imu_cnt)=fread(fip,[1,1],'float');
        
%         gyro2_x_raw(imu_cnt)=fread(fip,[1,1],'float');
%         gyro2_y_raw(imu_cnt)=fread(fip,[1,1],'float');
%         gyro2_z_raw(imu_cnt)=fread(fip,[1,1],'float');
%         
%         acc2_x_raw(imu_cnt)=fread(fip,[1,1],'float');
%         acc2_y_raw(imu_cnt)=fread(fip,[1,1],'float');
%         acc2_z_raw(imu_cnt)=fread(fip,[1,1],'float');
%         
%         gyro3_x_raw(imu_cnt)=fread(fip,[1,1],'float');
%         gyro3_y_raw(imu_cnt)=fread(fip,[1,1],'float');
%         gyro3_z_raw(imu_cnt)=fread(fip,[1,1],'float');
%         
%         acc3_x_raw(imu_cnt)=fread(fip,[1,1],'float');
%         acc3_y_raw(imu_cnt)=fread(fip,[1,1],'float');
%         acc3_z_raw(imu_cnt)=fread(fip,[1,1],'float');
%         
%         gyro4_x_raw(imu_cnt)=fread(fip,[1,1],'float');
%         gyro4_y_raw(imu_cnt)=fread(fip,[1,1],'float');
%         gyro4_z_raw(imu_cnt)=fread(fip,[1,1],'float');
%         
%         acc4_x_raw(imu_cnt)=fread(fip,[1,1],'float');
%         acc4_y_raw(imu_cnt)=fread(fip,[1,1],'float');
%         acc4_z_raw(imu_cnt)=fread(fip,[1,1],'float');
    end
end
fclose(fip);

gyro1_x = ((gyro1_raw_x) / 16.384);
gyro1_y = ((gyro1_raw_y) / 16.384);
gyro1_z = ((gyro1_raw_z) / 16.384);
acc1_x = ((acc1_raw_x) / 1365);
acc1_y = ((acc1_raw_y) / 1365);
acc1_z = ((acc1_raw_z) / 1365);

% gyro2_x = (gyro2_x_raw - 32768) / 16.384;
% gyro2_y = (gyro2_y_raw - 32768) / 16.384;
% gyro2_z = (gyro2_z_raw - 32768) / 16.384;
% acc2_x = (acc2_x_raw - 32768) / 1365;
% acc2_y = (acc2_y_raw - 32768) / 1365;
% acc2_z = (acc2_z_raw - 32768) / 1365;
% 
% gyro3_x = (gyro3_x_raw - 32768) / 16.384;
% gyro3_y = (gyro3_y_raw - 32768) / 16.384;
% gyro3_z = (gyro3_z_raw - 32768) / 16.384;
% acc3_x = (acc3_x_raw - 32768) / 1365;
% acc3_y = (acc3_y_raw - 32768) / 1365;
% acc3_z = (acc3_z_raw - 32768) / 1365;
% 
% gyro4_x = (gyro4_x_raw - 32768) / 16.384;
% gyro4_y = (gyro4_y_raw - 32768) / 16.384;
% gyro4_z = (gyro4_z_raw - 32768) / 16.384;
% acc4_x = (acc4_x_raw - 32768) / 1365;
% acc4_y = (acc4_y_raw - 32768) / 1365;
% acc4_z = (acc4_z_raw - 32768) / 1365;

%% 滤波
fs=50;fc=5;
[b,a] = butter(4,fc/(fs/2));
gyro1_filter_x = filter(b,a,gyro1_x);
gyro1_filter_y = filter(b,a,gyro1_y);
gyro1_filter_z = filter(b,a,gyro1_z);
acc1_filter_x = filter(b,a,acc1_x);
acc1_filter_y = filter(b,a,acc1_y);
acc1_filter_z = filter(b,a,acc1_z);

data_raw = [gyro1_raw_x;gyro1_raw_y;gyro1_raw_z;...
        acc1_raw_x;acc1_raw_y;acc1_raw_z;];
data_raw_acc = [acc1_raw_x;acc1_raw_y;acc1_raw_z;];

% norm_raw_acc = zeros(1,length(acc1_raw_x));
% for i=1:length(acc1_raw_x)
%     vec = [acc1_raw_x(i),acc1_raw_y(i),acc1_raw_z(i)];
%     norm_raw_acc(i) = norm(vec);
% end

%% 初始静止阶段
init_interval_duration = 30;
end_idx = init_interval_duration * freq_sdlog;
% 加速度方差
variance_acc_x = var(data_raw(4,50:end_idx));
variance_acc_y = var(data_raw(5,50:end_idx));
variance_acc_z = var(data_raw(6,50:end_idx));
variance_acc = [variance_acc_x,variance_acc_y,variance_acc_z];
norm_variance_acc = norm(variance_acc);
% 陀螺零偏
gyro_bias_x = mean()

%% 加速度计校准
acc_calib_params_9 = [];resnorm_9 = [];
acc_calib_params_12 = [];resnorm_12 = [];
extracted_samples = [];extracted_intervals = [];
error_calib_9 = [];error_calib_12 = [];

init_acc_calib_9 =[0,0,0,1,1,1,0,0,0];
init_acc_calib_12 =[0,0,0,0,0,0,1,1,1,0,0,0];
win = 50;min_size = 100;mean_enable = true;
for i=1:IMU_Sensors_Count
    for k=2:10
        % 静态检测
        threshold = k * norm_variance_acc;
        intervals = static_intervals_detector(data_raw_acc,threshold,win);
        [cur_extracted_samples,cur_extracted_intervals] = extract_intervals_samples(data_raw_acc, intervals, min_size, mean_enable);
        %     extracted_samples = [extracted_samples;cur_extracted_samples];
        %     extracted_intervals = [extracted_intervals;cur_extracted_intervals];
        
        % lsqnonlin优化
        options=optimset('TolX',1e-6,'TolFun',1e-6,'Algorithm','Levenberg-Marquardt');
        %         [cur_acc_calib_params_9, cur_resnorm_9] = lsqnonlin(@(cur_acc_calib_params_9) cost_acc(cur_acc_calib_params_9,cur_extracted_samples,9), init_acc_calib_9);
        %         acc_calib_params_9 = [acc_calib_params_9;cur_acc_calib_params_9];resnorm_9 = [resnorm_9;cur_resnorm_9];
        %         [cur_acc_calib_params_12, cur_resnorm_12] = lsqnonlin(@(cur_acc_calib_params_12) cost_acc(cur_acc_calib_params_12,cur_extracted_samples,12), init_acc_calib_12);
        %         acc_calib_params_12 = [acc_calib_params_12;cur_acc_calib_params_12];resnorm_12 = [resnorm_12;cur_resnorm_12];
        
        [cur_acc_calib_params_9,cur_resnorm_9] = lsqnonlin(@(acc_calib_params) cost_acc_9(acc_calib_params,cur_extracted_samples), init_acc_calib_9, [],[],options);
        acc_calib_params_9 = [acc_calib_params_9;cur_acc_calib_params_9];resnorm_9 = [resnorm_9;cur_resnorm_9];
        acc_calib_ext_9 = unbiasNormalize_9(cur_extracted_samples, cur_acc_calib_params_9);
        norm_calib_acc = [];
        for i=1:length(cur_extracted_samples)
            norm_calib_acc(i) = norm(acc_calib_ext_9(:,i));
        end
        error_calib_9 = [error_calib_9;mean(abs(norm_calib_acc - 1365*ones(1,length(norm_calib_acc))))];
        
        [cur_acc_calib_params_12,cur_resnorm_12] = lsqnonlin(@(acc_calib_params) cost_acc_12(acc_calib_params,cur_extracted_samples), init_acc_calib_12,[],[], options);
        acc_calib_params_12 = [acc_calib_params_12;cur_acc_calib_params_12];resnorm_12 = [resnorm_12;cur_resnorm_12];
        acc_calib_ext_12 = unbiasNormalize_12(cur_extracted_samples, cur_acc_calib_params_12);
        norm_calib_acc = [];
        for i=1:length(cur_extracted_samples)
            norm_calib_acc(i) = norm(acc_calib_ext_12(:,i));
        end
        error_calib_12 = [error_calib_12;mean(abs(norm_calib_acc - 1365*ones(1,length(norm_calib_acc))))];
    end
end
calib_acc_samples = unbiasNormalize_12(data_raw_acc,cur_acc_calib_params_12);

%% 陀螺校准
extracted_samples = [];extracted_intervals = [];
[extracted_samples,extracted_intervals] = extract_intervals_samples(calib_acc_samples, cur_extracted_intervals, min_size, mean_enable);

%% 画图
time = time * 1e-3;

plotintervals = zeros(1,length(acc1_raw_x));
k = 1e3;
for i=1:length(cur_extracted_intervals)
    plotintervals(1,cur_extracted_intervals(i).start_idx:cur_extracted_intervals(i).end_idx) = k * ones(1,cur_extracted_intervals(i).end_idx - cur_extracted_intervals(i).start_idx + 1);
end

figure
plot(time,acc1_raw_x);
grid on;hold on;
plot(time,acc1_raw_y);
grid on;hold on;
plot(time,acc1_raw_z);
grid on;hold on;
plot(time,plotintervals);
xlabel('time');
ylabel('acc raw');
legend('acc raw x','acc raw y','acc raw z');
